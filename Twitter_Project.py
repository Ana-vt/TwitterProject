# -*- coding: utf-8 -*-
"""Project_I.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l_0KCBKkP-uhRDbJywmOMuu9JGSioVLp

# **IMPORTS**
"""

import tweepy
import pandas as pd
import numpy as np
import collections
import matplotlib.pyplot as plt
import networkx as nx

"""# **METHODS**"""

def twitter_setup(consumer_key, consumer_secret, access_token, access_secret):
    # Authentication
    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)
    # Access
    auth.set_access_token(access_token, access_secret)
    return tweepy.API(auth, wait_on_rate_limit=True)

def data_collection(api, accounts):
  # Generate a Dataframe to store downloaded data
  data = pd.DataFrame(columns=['Account','Follower'])

  # Go through all the accouunts
  for account in accounts:
    
      # Get the list of account followers 
      followers = []
      for follower in api.followers(screen_name=account, count=40):
          followers.append(follower.screen_name)
      
      # Generate a dataframe with the account information
      account_data = pd.DataFrame(columns=['Account','Follower'])
      account_data['Account'] = followers
      account_data['Follower'] = account 

      # Add the account information to the dataframe containing the data of all accounts
      data = pd.concat([data, account_data], ignore_index=True)
  return data

def data_visualization(data):
  
  # Generate the networkx graph (collection of nodes (vertices) along with identified pairs of nodes) with the Nodes and edges
  graph = nx.from_pandas_edgelist(data, 'Account', 'Follower')

  # Get the nodes position in the graph
  pos = nx.spring_layout(graph)

  # Plot the graph
  plt.figure(figsize=(50, 50))
  # Define the nodes, labels & edges
  nx.draw_networkx_nodes(graph, pos, node_size=1000)
  nx.draw_networkx_labels(graph, pos, font_size=12)
  nx.draw_networkx_edges(graph, pos, width=0.5)
  plt.show()

  return graph

def calculate_degree_distribution(graph):
  # Calculate Degree Distribution
  degrees = []
  for node in graph.nodes():
    degrees.append(graph.degree(node))

  # Get the number of each degree
  counter = collections.Counter(degrees)
  degree = []
  count = []
  for d, c in counter.items():
    degree.append(d)
    count.append(c)

  # Plot Degree Distribution
  plt.figure(figsize=(15, 15))
  plt.title("Degree Distribution Histogram")
  plt.bar(degree, count, color='blue')
  plt.ylabel("Count")
  plt.xlabel("Degree")
  plt.show()

def calculate_diameter(graph):
  diameter = nx.diameter(graph)
  print("The Diameter of the graph is: " + str(diameter))

def calculate_clustering_coefficient(graph):
  clus_coef = nx.clustering(graph)
  print(clus_coef)

def calculate_betweenness_centrality(graph):
  # Calculate Betweenness Centrality
  betweenness = nx.betweenness_centrality(graph)

  # Get the number of each degree
  counter = collections.Counter(betweenness)
  between = []
  count = []
  for b, c in counter.items():
    between.append(b)
    count.append(c)

  # Plot Degree Distribution
  plt.figure(figsize=(15, 15))
  plt.title("Betweenness Centrality Histogram")
  plt.bar(between, count, color='blue')
  plt.ylabel("Count")
  plt.xlabel("Betweenness")
  plt.show()

"""# **MAIN**
This is the main code where all the steps and the code structure is defined

"""

# Keys - Twitter account: @_enekogonzalez
consumer_key = 'bGu2WGYLYUoSC67gyRDk0uU1K'
consumer_secret = 'lU7MfXoNe90VWGcAfWcvlKKbacToMXvT0SL3ZB0UQTucSPkT3F'
access_token = '1590230502216269824-ydzXFkIk0RQV9r7lKwoJ54cdmsKj15'
access_secret = 'AvVMBrxC1RliEt599hOXrlztSLWqgHqZsGboz4odBV9EH'

# 0. Connect to Twitter API and verify the connection 
api = twitter_setup(consumer_key, consumer_secret, access_token, access_secret)
api.verify_credentials()

# 1. Data Collection
accounts = ("djokernole", "carlosalcaraz", "steftsitsipas", "CasperRuud98", "AndreyRublev97", "rafaelnadal", "felixtennis", "Taylor_Fritz97", "holgerrune2003", "HubertHurkacz")
data = data_collection(api, accounts)

# 2. Data Visualization
graph = data_visualization(data)

# 3. Network Measures Calculation
calculate_degree_distribution(graph)
calculate_diameter(graph)
calculate_betweenness_centrality(graph)
calculate_clustering_coefficient(graph)

